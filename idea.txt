// https://gist.github.com/scottrippey/1349099/cd6b993f0cc8595fd231594576d7c4b0a6d611d2
// Consider abstract facets like "in:cart", "is:duplicate"
// countof:>=20 // Are there at least 20 of this thing in the list of items?
// in:cart would require passing a scoped context object to Lapidary
// is:<THING>
// -- THING must be a function defined in identityReductions
 
/*

    Consider using one global and one transient context associated with each Lapidary() instead of using context as a parameter to FilterEvaluators
*/

/* Consider using performance.now() to determine expensive branches. Prefer evaluating cheap branches when possible */
/*

/*When making the input component make sure double clicks hilite stuff that respects
The syntax*/
const inventory = {
    items: [
        {
            id: 2397jg,
            name: War and Peace,
            sellerId: 99slsls9897,
            price: 25.45,
        }
    ]
};
const cart = {
    items: [
        {
            id: 2397jg,
            shippingFee: 2.00,
        }
    ],
    status: 'in progress',
};
const favorites = [2397jg];
Lapidary ({
    context: {
        cart,
        favorites,
    },
    items: inventory.items,
    facets: {
        name: {
            type: string,
            evaluator: Lapidary.fuzzyStringEvaluator,
            priority: 1,
        },
        price: {
            type: number,
            evaluator: Lapidary.numericEvaluator,
            priority: 2,
        },
        is:duplicate {
            aliases: [is:dupe],
            type: custom,
            priority: 3,
            evaluator: (item, self, evaluatorContext) => {
                if (evaluatorContext[item.id]) {
                    return ({
                        value: true,
                        evaluatorContext,
                    })
                } else if(self.context.items.contains(item)) {
                    return ({
                        value: true,
                        evaluatorContext: {
                            ...evaluatorContext,
                            [item.id]: true
                        }
                    })
                } else {
                    return ({
                        value: false
                        evaluatorcontext
                    })
                }
            }
            comparator: Lapidary.booleanComparator,
        }
    }
})
*/

// Recursively generate nested arrays of filter generation functions based on parentheses
// BuildFilterGenerators(queryString) {
//     const queryStringsArr = splitQuery(queryString);
//     if (len(queryStringsArr) > 1) {
//         return queryStringsArr.map(qs => generate(qs))
//     }
//     const FilterGenerator = FilterGenerator(queryStringsArr[0]);
//     return [FilterGenerator];
// }

/* DEFINITIONS */
predicate: an expression that will evaluate to either true or false
filter: a function that for a given x will 